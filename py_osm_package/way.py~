import xml.etree.ElementTree as etree
from py_osm_package.tag_parse import *
from py_osm_package.osm_app import *
import matplotlib.path as mplPath
import numpy as np
class Way:
	def __init__(self,osm_tree_child,osm_app):
		print("way wat")
		self.osm_app =osm_app
		self.id = osm_tree_child.attrib["id"] # id unique in ways
		self.way_nodes=[]
		self.tags = parse_tags(osm_tree_child) # dictionary of tags, where k= key, v = value
		for i in osm_tree_child:
			if i.tag == "nd":
				self.way_nodes.append(self.osm_app.nodes[i.attrib["ref"]])
		self.matplotlib_path = None
		tuple_list = []
		for i in self.way_nodes:
			tuple_list.append((i.lat,i.lon))
		self.matplotlib_path = mplPath.Path(np.array(tuple_list)) 

		print(self.matplotlib_path)
		print(self.id)
		#print(self.geo_way)

# og√≥lnie porzucam chwilowo zadanie - trzeba dodac geometryczna reprezentacje dla Way i cokolwiek dla Relation

#najlepiej bawic sie biblioteka matplotlib albowiem jest w maire szybka i ma rzeczy jakie chcemy

# ogolnie to tam uzywa sie obiektu patches czy cos ale to zobaczymy

#mozliwe jest tez zeby po prostu pozostawic way bez geometrycznej reprezentacji, dodac najwyzej funkcje do jej tworzenia, a robic to runtime
